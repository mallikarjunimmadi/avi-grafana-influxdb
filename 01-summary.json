{
  "__inputs": [
    {
      "name": "DS_INFLUXDB",
      "label": "InfluxDB",
      "description": "",
      "type": "datasource",
      "pluginId": "influxdb",
      "pluginName": "InfluxDB"
    }
  ],
  "__requires": [
    {
      "type": "datasource",
      "id": "influxdb",
      "name": "InfluxDB",
      "version": "2.0.0"
    },
    {
      "type": "panel",
      "id": "stat",
      "name": "Stat",
      "version": "1.0.0"
    },
    {
      "type": "panel",
      "id": "timeseries",
      "name": "Time series",
      "version": "1.0.0"
    }
  ],
  "title": "01â€‘Summary Flux v2",
  "timezone": "browser",
  "schemaVersion": 36,
  "version": 1,
  "refresh": "1m",
  "time": {
    "from": "now-3h",
    "to": "now"
  },
  "templating": {
    "list": [
      {
        "name": "bucket",
        "type": "constant",
        "label": "InfluxDB Bucket",
        "query": "",
        "current": {
          "text": "avi",
          "value": "avi"
        },
        "options": [
          {
            "text": "avi",
            "value": "avi",
            "selected": true
          }
        ]
      },
      {
        "name": "location",
        "type": "query",
        "datasource": "${DS_INFLUXDB}",
        "query": "import \"influxdata/influxdb/v1\"\nv1.tagValues(bucket: \"${bucket}\", tag: \"location\")",
        "label": "Location"
      },
      {
        "name": "environment",
        "type": "query",
        "datasource": "${DS_INFLUXDB}",
        "query": "import \"influxdata/influxdb/v1\"\nfrom(bucket: \"${bucket}\")\n  |> range(start: -30d)\n  |> filter(fn: (r) => r[\"location\"] =~ /^${location:regex}$/)\n  |> v1.tagValues(tag: \"environment\")",
        "label": "Environment"
      },
      {
        "name": "device",
        "type": "query",
        "datasource": "${DS_INFLUXDB}",
        "query": "import \"influxdata/influxdb/v1\"\nfrom(bucket: \"${bucket}\")\n  |> range(start: -30d)\n  |> filter(fn: (r) => r[\"location\"] =~ /^${location:regex}$/ and r[\"environment\"] =~ /^${environment:regex}$/)\n  |> v1.tagValues(tag: \"avicontroller\")",
        "label": "Device"
      }
    ]
  },
  "panels": [
    {
      "type": "stat",
      "title": "VS UP",
      "datasource": "${DS_INFLUXDB}",
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"status_up\" and r[\"avicontroller\"] =~ /^${device:regex}$/ and r[\"environment\"] =~ /^${environment:regex}$/ and r[\"location\"] =~ /^${location:regex}$/ and r[\"metric_type\"] == \"virtualservice_up\")\n  |> last()\n  |> yield()"
        }
      ]
    },
    {
      "type": "stat",
      "title": "CPS",
      "datasource": "${DS_INFLUXDB}",
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"l4_client.avg_new_established_conns\" and r[\"avicontroller\"] =~ /^${device:regex}$/ and r[\"environment\"] =~ /^${environment:regex}$/ and r[\"location\"] =~ /^${location:regex}$/ and r[\"metric_type\"] == \"virtualservice_metrics\")\n  |> aggregateWindow(every: v.windowPeriod, fn: sum, createEmpty: false)\n  |> yield()"
        }
      ]
    },
    {
      "type": "stat",
      "title": "SSL TPS",
      "datasource": "${DS_INFLUXDB}",
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"l7_client.avg_ssl_handshakes_new\" and r[\"avicontroller\"] =~ /^${device:regex}$/ and r[\"environment\"] =~ /^${environment:regex}$/ and r[\"location\"] =~ /^${location:regex}$/ and r[\"metric_type\"] == \"virtualservice_metrics\")\n  |> aggregateWindow(every: v.windowPeriod, fn: sum, createEmpty: false)\n  |> yield()"
        }
      ]
    },
    {
      "type": "stat",
      "title": "Total Bandwidth",
      "datasource": "${DS_INFLUXDB}",
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"se_if.avg_bandwidth\" and r[\"avicontroller\"] =~ /^${device:regex}$/ and r[\"environment\"] =~ /^${environment:regex}$/ and r[\"location\"] =~ /^${location:regex}$/ and r[\"metric_type\"] == \"serviceengine_metrics\")\n  |> aggregateWindow(every: v.windowPeriod, fn: sum, createEmpty: false)\n  |> yield()"
        }
      ]
    },
    {
      "type": "timeseries",
      "title": "Controller CPU%",
      "datasource": "${DS_INFLUXDB}",
      "targets": [
        {
          "refId": "A",
          "query": "from(bucket: \"${bucket}\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"controller_stats.avg_cpu_usage\" and r[\"avicontroller\"] =~ /^${device:regex}$/ and r[\"environment\"] =~ /^${environment:regex}$/ and r[\"location\"] =~ /^${location:regex}$/ and r[\"metric_type\"] == \"controller_metrics\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> group(columns: [\"cluster_node\"])\n  |> yield()"
        }
      ]
    }

    // Additional panels can be inserted similarly
  ]
}
